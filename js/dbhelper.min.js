window.reviewsToBeSynced=[];class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/restaurants"}static get REVIEWS_URL(){return"http://localhost:1337/reviews"}static get dbPromise(){return DBHelper.openDatabase()}static openDatabase(e){if("indexedDB"in window)return idb.open("restaurant-db",2,function(e){switch(e.oldVersion){case 0:e.createObjectStore("restaurant",{keyPath:"id",autoIncrement:!0});case 1:e.createObjectStore("reviews")}});console.log("This browser doesn't support IndexedDB")}static updateDB(e,t){return t.then(function(t){var r=t.transaction("restaurant","readwrite"),n=r.objectStore("restaurant");e.forEach(function(e){n.put(e),r.complete})})}static fetchfromDb(e){return e.then(function(e){if(!e)return;return e.transaction("restaurant").objectStore("restaurant").getAll()})}static fetchRestaurants(e){const t=DBHelper.openDatabase();DBHelper.fetchfromDb(t).then(r=>{r.length>0?e(null,r):fetch(DBHelper.DATABASE_URL).then(e=>{if(!e.ok)throw e.statusText;return e.json()}).then(r=>{DBHelper.updateDB(r,t),e(null,r)}).catch(t=>{e(t,null)})})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}})}static getReviewsFromDb(e,t){return e.then(e=>{if(!e)return;return e.transaction("reviews").objectStore("reviews").get(t)})}static updateReviewsInDb(e,t,r){return e.then(e=>{if(!e)return;let n=e.transaction("reviews","readwrite");n.objectStore("reviews").put(r,t),n.complete})}static fetchRestaurantReviewsById(e){const t=`${this.REVIEWS_URL}/?restaurant_id=${e}`,r=DBHelper.openDatabase();return navigator.onLine?fetch(t).then(e=>e.json()).then(t=>{if(!t)throw new Error("Reviews not found");return DBHelper.updateReviewsInDb(r,e,t),t}).catch(t=>DBHelper.getReviewsFromDb(r,e).then(e=>{if(e&&e.length>0)return e})):DBHelper.getReviewsFromDb(r,e).then(n=>n&&n.length>0?n:fetch(t).then(e=>e.json()).then(t=>{if(t)return DBHelper.updateReviewsInDb(r,e,t),t})).catch(e=>{console.log(`Request failed with error: ${e}`)})}static postReviewToDB(e){const t=DBHelper.openDatabase();DBHelper.getReviewsFromDb(t,e.restaurant_id).then(r=>{r&&(r.push(e),DBHelper.updateReviewsInDb(t,e.restaurant_id,r),navigator.onLine?DBHelper.postReviewToServer(e):window.reviewsToBeSynced.push(e))})}static postReviewToServer(e){const t={restaurant_id:e.restaurant_id,name:e.name,rating:e.rating,comments:e.comments};return fetch("http://localhost:1337/reviews",{method:"POST",body:JSON.stringify(t),headers:{"Content-Type":"application/json"}})}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.cuisine_type==e);t(null,r)}})}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e){return`/img/${e.photograph}`}static FavouriteRestaurantNetwork({id:e,is_favorite:t}){fetch(`${this.DATABASE_URL}/${e}/?is_favorite=${!t}`,{method:"PUT"}).then(e=>e.json()).then(e=>console.log(e))}static handleFavoriteClick(e,t){let r,n;return n=(r=e.transaction("restaurant","readwrite")).objectStore("restaurant"),t.is_favorite=!t.is_favorite,n.put(t),r.complete}static markFavorite(e){"indexedDB"in window&&this.dbPromise.then(t=>{t&&this.handleFavoriteClick(t,e)}),this.FavouriteRestaurantNetwork(e)}static mapMarkerForRestaurant(e,t){const r=new L.marker([e.latlng.lat,e.latlng.lng],{title:e.name,alt:e.name,url:DBHelper.urlForRestaurant(e)});return r.addTo(newMap),r}}